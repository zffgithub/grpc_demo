# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import cyber_pb2 as cyber__pb2


class CyberManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHello = channel.unary_unary(
                '/service.CyberManager/SayHello',
                request_serializer=cyber__pb2.HelloRequest.SerializeToString,
                response_deserializer=cyber__pb2.HelloReply.FromString,
                )
        self.EasyMode = channel.unary_unary(
                '/service.CyberManager/EasyMode',
                request_serializer=cyber__pb2.Request.SerializeToString,
                response_deserializer=cyber__pb2.Response.FromString,
                )
        self.ClientStream = channel.stream_unary(
                '/service.CyberManager/ClientStream',
                request_serializer=cyber__pb2.Request.SerializeToString,
                response_deserializer=cyber__pb2.Response.FromString,
                )
        self.ServerStream = channel.unary_stream(
                '/service.CyberManager/ServerStream',
                request_serializer=cyber__pb2.Request.SerializeToString,
                response_deserializer=cyber__pb2.Response.FromString,
                )
        self.BidirectionalStream = channel.stream_stream(
                '/service.CyberManager/BidirectionalStream',
                request_serializer=cyber__pb2.Request.SerializeToString,
                response_deserializer=cyber__pb2.Response.FromString,
                )
        self.RemoteControl = channel.unary_unary(
                '/service.CyberManager/RemoteControl',
                request_serializer=cyber__pb2.Request.SerializeToString,
                response_deserializer=cyber__pb2.Response.FromString,
                )
        self.CyberControl = channel.unary_stream(
                '/service.CyberManager/CyberControl',
                request_serializer=cyber__pb2.Request.SerializeToString,
                response_deserializer=cyber__pb2.Response.FromString,
                )


class CyberManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SayHello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EasyMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BidirectionalStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoteControl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CyberControl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CyberManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHello,
                    request_deserializer=cyber__pb2.HelloRequest.FromString,
                    response_serializer=cyber__pb2.HelloReply.SerializeToString,
            ),
            'EasyMode': grpc.unary_unary_rpc_method_handler(
                    servicer.EasyMode,
                    request_deserializer=cyber__pb2.Request.FromString,
                    response_serializer=cyber__pb2.Response.SerializeToString,
            ),
            'ClientStream': grpc.stream_unary_rpc_method_handler(
                    servicer.ClientStream,
                    request_deserializer=cyber__pb2.Request.FromString,
                    response_serializer=cyber__pb2.Response.SerializeToString,
            ),
            'ServerStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ServerStream,
                    request_deserializer=cyber__pb2.Request.FromString,
                    response_serializer=cyber__pb2.Response.SerializeToString,
            ),
            'BidirectionalStream': grpc.stream_stream_rpc_method_handler(
                    servicer.BidirectionalStream,
                    request_deserializer=cyber__pb2.Request.FromString,
                    response_serializer=cyber__pb2.Response.SerializeToString,
            ),
            'RemoteControl': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoteControl,
                    request_deserializer=cyber__pb2.Request.FromString,
                    response_serializer=cyber__pb2.Response.SerializeToString,
            ),
            'CyberControl': grpc.unary_stream_rpc_method_handler(
                    servicer.CyberControl,
                    request_deserializer=cyber__pb2.Request.FromString,
                    response_serializer=cyber__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service.CyberManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CyberManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.CyberManager/SayHello',
            cyber__pb2.HelloRequest.SerializeToString,
            cyber__pb2.HelloReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EasyMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.CyberManager/EasyMode',
            cyber__pb2.Request.SerializeToString,
            cyber__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/service.CyberManager/ClientStream',
            cyber__pb2.Request.SerializeToString,
            cyber__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/service.CyberManager/ServerStream',
            cyber__pb2.Request.SerializeToString,
            cyber__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BidirectionalStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/service.CyberManager/BidirectionalStream',
            cyber__pb2.Request.SerializeToString,
            cyber__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoteControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.CyberManager/RemoteControl',
            cyber__pb2.Request.SerializeToString,
            cyber__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CyberControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/service.CyberManager/CyberControl',
            cyber__pb2.Request.SerializeToString,
            cyber__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
