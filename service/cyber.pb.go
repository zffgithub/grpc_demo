// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: cyber.proto

package grpc_demo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyber_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cyber_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_cyber_proto_rawDescGZIP(), []int{0}
}

func (x *HelloRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HelloReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HelloReply) Reset() {
	*x = HelloReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyber_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloReply) ProtoMessage() {}

func (x *HelloReply) ProtoReflect() protoreflect.Message {
	mi := &file_cyber_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloReply.ProtoReflect.Descriptor instead.
func (*HelloReply) Descriptor() ([]byte, []int) {
	return file_cyber_proto_rawDescGZIP(), []int{1}
}

func (x *HelloReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CyberId int32  `protobuf:"varint,1,opt,name=cyber_id,json=cyberId,proto3" json:"cyber_id,omitempty"`
	Danmu   string `protobuf:"bytes,2,opt,name=danmu,proto3" json:"danmu,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyber_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_cyber_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_cyber_proto_rawDescGZIP(), []int{2}
}

func (x *Request) GetCyberId() int32 {
	if x != nil {
		return x.CyberId
	}
	return 0
}

func (x *Request) GetDanmu() string {
	if x != nil {
		return x.Danmu
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No  int32  `protobuf:"varint,1,opt,name=no,proto3" json:"no,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyber_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_cyber_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_cyber_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetNo() int32 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *Response) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_cyber_proto protoreflect.FileDescriptor

var file_cyber_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x0a, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3a, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x79, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x79, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x6e, 0x6d,
	0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x22, 0x2c,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xa0, 0x03, 0x0a,
	0x0c, 0x43, 0x79, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x08, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x08, 0x45, 0x61, 0x73, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x37, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x13,
	0x42, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x36,
	0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x43, 0x79, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42,
	0x0d, 0x5a, 0x0b, 0x2e, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cyber_proto_rawDescOnce sync.Once
	file_cyber_proto_rawDescData = file_cyber_proto_rawDesc
)

func file_cyber_proto_rawDescGZIP() []byte {
	file_cyber_proto_rawDescOnce.Do(func() {
		file_cyber_proto_rawDescData = protoimpl.X.CompressGZIP(file_cyber_proto_rawDescData)
	})
	return file_cyber_proto_rawDescData
}

var file_cyber_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cyber_proto_goTypes = []interface{}{
	(*HelloRequest)(nil), // 0: service.HelloRequest
	(*HelloReply)(nil),   // 1: service.HelloReply
	(*Request)(nil),      // 2: service.Request
	(*Response)(nil),     // 3: service.Response
}
var file_cyber_proto_depIdxs = []int32{
	0, // 0: service.CyberManager.SayHello:input_type -> service.HelloRequest
	2, // 1: service.CyberManager.EasyMode:input_type -> service.Request
	2, // 2: service.CyberManager.ClientStream:input_type -> service.Request
	2, // 3: service.CyberManager.ServerStream:input_type -> service.Request
	2, // 4: service.CyberManager.BidirectionalStream:input_type -> service.Request
	2, // 5: service.CyberManager.RemoteControl:input_type -> service.Request
	2, // 6: service.CyberManager.CyberControl:input_type -> service.Request
	1, // 7: service.CyberManager.SayHello:output_type -> service.HelloReply
	3, // 8: service.CyberManager.EasyMode:output_type -> service.Response
	3, // 9: service.CyberManager.ClientStream:output_type -> service.Response
	3, // 10: service.CyberManager.ServerStream:output_type -> service.Response
	3, // 11: service.CyberManager.BidirectionalStream:output_type -> service.Response
	3, // 12: service.CyberManager.RemoteControl:output_type -> service.Response
	3, // 13: service.CyberManager.CyberControl:output_type -> service.Response
	7, // [7:14] is the sub-list for method output_type
	0, // [0:7] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cyber_proto_init() }
func file_cyber_proto_init() {
	if File_cyber_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cyber_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyber_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyber_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyber_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cyber_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cyber_proto_goTypes,
		DependencyIndexes: file_cyber_proto_depIdxs,
		MessageInfos:      file_cyber_proto_msgTypes,
	}.Build()
	File_cyber_proto = out.File
	file_cyber_proto_rawDesc = nil
	file_cyber_proto_goTypes = nil
	file_cyber_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CyberManagerClient is the client API for CyberManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CyberManagerClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	EasyMode(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (CyberManager_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (CyberManager_ServerStreamClient, error)
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (CyberManager_BidirectionalStreamClient, error)
	RemoteControl(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CyberControl(ctx context.Context, in *Request, opts ...grpc.CallOption) (CyberManager_CyberControlClient, error)
}

type cyberManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewCyberManagerClient(cc grpc.ClientConnInterface) CyberManagerClient {
	return &cyberManagerClient{cc}
}

func (c *cyberManagerClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/service.CyberManager/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberManagerClient) EasyMode(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service.CyberManager/EasyMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberManagerClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (CyberManager_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CyberManager_serviceDesc.Streams[0], "/service.CyberManager/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cyberManagerClientStreamClient{stream}
	return x, nil
}

type CyberManager_ClientStreamClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type cyberManagerClientStreamClient struct {
	grpc.ClientStream
}

func (x *cyberManagerClientStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cyberManagerClientStreamClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cyberManagerClient) ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (CyberManager_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CyberManager_serviceDesc.Streams[1], "/service.CyberManager/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cyberManagerServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CyberManager_ServerStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type cyberManagerServerStreamClient struct {
	grpc.ClientStream
}

func (x *cyberManagerServerStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cyberManagerClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (CyberManager_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CyberManager_serviceDesc.Streams[2], "/service.CyberManager/BidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cyberManagerBidirectionalStreamClient{stream}
	return x, nil
}

type CyberManager_BidirectionalStreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type cyberManagerBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *cyberManagerBidirectionalStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cyberManagerBidirectionalStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cyberManagerClient) RemoteControl(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service.CyberManager/RemoteControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberManagerClient) CyberControl(ctx context.Context, in *Request, opts ...grpc.CallOption) (CyberManager_CyberControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CyberManager_serviceDesc.Streams[3], "/service.CyberManager/CyberControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &cyberManagerCyberControlClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CyberManager_CyberControlClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type cyberManagerCyberControlClient struct {
	grpc.ClientStream
}

func (x *cyberManagerCyberControlClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CyberManagerServer is the server API for CyberManager service.
type CyberManagerServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	EasyMode(context.Context, *Request) (*Response, error)
	ClientStream(CyberManager_ClientStreamServer) error
	ServerStream(*Request, CyberManager_ServerStreamServer) error
	BidirectionalStream(CyberManager_BidirectionalStreamServer) error
	RemoteControl(context.Context, *Request) (*Response, error)
	CyberControl(*Request, CyberManager_CyberControlServer) error
}

// UnimplementedCyberManagerServer can be embedded to have forward compatible implementations.
type UnimplementedCyberManagerServer struct {
}

func (*UnimplementedCyberManagerServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedCyberManagerServer) EasyMode(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EasyMode not implemented")
}
func (*UnimplementedCyberManagerServer) ClientStream(CyberManager_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (*UnimplementedCyberManagerServer) ServerStream(*Request, CyberManager_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (*UnimplementedCyberManagerServer) BidirectionalStream(CyberManager_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (*UnimplementedCyberManagerServer) RemoteControl(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteControl not implemented")
}
func (*UnimplementedCyberManagerServer) CyberControl(*Request, CyberManager_CyberControlServer) error {
	return status.Errorf(codes.Unimplemented, "method CyberControl not implemented")
}

func RegisterCyberManagerServer(s *grpc.Server, srv CyberManagerServer) {
	s.RegisterService(&_CyberManager_serviceDesc, srv)
}

func _CyberManager_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyberManagerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CyberManager/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyberManagerServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CyberManager_EasyMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyberManagerServer).EasyMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CyberManager/EasyMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyberManagerServer).EasyMode(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CyberManager_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CyberManagerServer).ClientStream(&cyberManagerClientStreamServer{stream})
}

type CyberManager_ClientStreamServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type cyberManagerClientStreamServer struct {
	grpc.ServerStream
}

func (x *cyberManagerClientStreamServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cyberManagerClientStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CyberManager_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CyberManagerServer).ServerStream(m, &cyberManagerServerStreamServer{stream})
}

type CyberManager_ServerStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type cyberManagerServerStreamServer struct {
	grpc.ServerStream
}

func (x *cyberManagerServerStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _CyberManager_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CyberManagerServer).BidirectionalStream(&cyberManagerBidirectionalStreamServer{stream})
}

type CyberManager_BidirectionalStreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type cyberManagerBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *cyberManagerBidirectionalStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cyberManagerBidirectionalStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CyberManager_RemoteControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyberManagerServer).RemoteControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CyberManager/RemoteControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyberManagerServer).RemoteControl(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CyberManager_CyberControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CyberManagerServer).CyberControl(m, &cyberManagerCyberControlServer{stream})
}

type CyberManager_CyberControlServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type cyberManagerCyberControlServer struct {
	grpc.ServerStream
}

func (x *cyberManagerCyberControlServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _CyberManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.CyberManager",
	HandlerType: (*CyberManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _CyberManager_SayHello_Handler,
		},
		{
			MethodName: "EasyMode",
			Handler:    _CyberManager_EasyMode_Handler,
		},
		{
			MethodName: "RemoteControl",
			Handler:    _CyberManager_RemoteControl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _CyberManager_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _CyberManager_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _CyberManager_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CyberControl",
			Handler:       _CyberManager_CyberControl_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cyber.proto",
}
